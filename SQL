You've started a new movie-rating website, and you've been collecting data on reviewers' ratings of various movies. There's not much data yet, but you can still try out some interesting queries. Here's the schema: 

Movie ( mID, title, year, director ) 
English: There is a movie with ID number mID, a title, a release year, and a director. 

Reviewer ( rID, name ) 
English: The reviewer with ID number rID has a certain name. 

Rating ( rID, mID, stars, ratingDate ) 
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. 

Your queries will run over a small data set conforming to the schema. View the database. (You can also download the schema and data.) 
Instructions: Each problem asks you to write a query in SQL. To run your query against our back-end sample database using SQLite, click the "Submit" button. You will see a display of your query result and the expected result. If the results match, your query will be marked "correct". You may run as many queries as you like for each question.
Important Notes:

Your queries are executed using SQLite, so you must conform to the SQL constructs supported by SQLite.
Unless a specific result ordering is asked for, you can return the result rows in any order.
You are to translate the English into a SQL query that computes the desired result over all possible databases. All we actually check is that your query gets the right answer on the small sample database. Thus, even if your solution is marked as correct, it is possible that your query does not correctly reflect the problem at hand. (For example, if we ask for a complex condition that requires accessing all of the tables, but over our small data set in the end the condition is satisfied only by Star Wars, then the query "select title from Movie where title = 'Star Wars'" will be marked correct even though it doesn't reflect the actual question.) Circumventing the system in this fashion will get you a high score on the exercises, but it won't help you learn SQL. On the other hand, an incorrect attempt at a general solution is unlikely to produce the right answer, so you shouldn't be led astray by our checking system.

You may perform these exercises as many times as you like, so we strongly encourage you to keep working with them until you complete the exercises with full credit.
~~~~~~~~~~~~~~~~~~~~~~
Q1  (1 point possible)
Find the titles of all movies directed by Steven Spielberg. 
SELECT title
FROM Movie
WHERE director='Steven Spielberg'

Q2  (1 point possible)
Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.
SELECT DISTINCT year
FROM Movie M
JOIN Rating R ON M.mID=R.mID
WHERE stars>=4
ORDER BY 1

Q3  (1 point possible)
Find the titles of all movies that have no ratings. 
SELECT DISTINCT title
FROM Movie M
WHERE mID NOT IN (SELECT mID FROM Rating)

Q4  (1 point possible)
Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. 
SELECT name
FROM Reviewer R
WHERE rID IN (SELECT rID
              FROM Rating Ra
              WHERE ratingDate IS NULL)
              
Q5  (1 point possible)
Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. 
SELECT name, title, stars, ratingDate
FROM Movie M
JOIN Rating Ra ON M.mID=Ra.mID
JOIN Reviewer R ON R.rID=Ra.rID
ORDER BY 1,2,3

Q6  (1 point possible)
For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. 
SELECT name, title
FROM Reviewer R
JOIN Rating R1 ON R1.rID=R.rID
JOIN Movie M ON M.mID=R1.mID
WHERE EXISTS (SELECT rID, mID FROM Rating R2
              WHERE R1.ratingDate < R2.ratingDate AND R1.stars<R2.stars
              AND R1.rID=R2.rID AND R1.mID=R2.mID)

{WRONG}
[SELECT name, title
 FROM Reviewer R
 JOIN Rating R1 ON R1.rID=R.rID
 JOIN Movie M ON M.mID=R1.mID
 WHERE R1.rID IN (SELECT rID FROM Rating R2
              WHERE R1.ratingDate < R2.ratingDate AND R1.stars<R2.stars)
 AND R1.mID IN (SELECT mID FROM Rating R2
            WHERE R1.ratingDate < R2.ratingDate AND R1.stars<R2.stars)]            

Q7 (1/1 point)
For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. 
SELECT DISTINCT title, Maxstars
FROM Movie M
JOIN (SELECT MAX(stars) AS Maxstars, mID
      FROM Rating
      GROUP BY 2) AS MR
ON M.mID=MR.mID

Q8
(1 point possible)
For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. 
SELECT title, ratingspread
FROM Movie M
JOIN (SELECT mID, MAX(stars)-MIN(stars) AS ratingspread
      FROM Rating R
      GROUP BY 1) AS Rs
ON M.mID=Rs.mID
ORDER BY 2 DESC, 1

Q9
(1 point possible)
Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) 
SELECT MAX(a1)-MIN(a1) AS Diff
FROM (SELECT AVG(Avr) AS a1
      FROM (SELECT AVG(stars) AS Avr FROM Rating R, Movie M
            WHERE M.mID=R.mID AND year<1980
            GROUP BY R.mID)
UNION
SELECT AVG(Avr) AS a1
FROM (SELECT AVG(stars) AS Avr FROM Rating R, Movie M
      WHERE M.mID=R.mID AND year>=1980
      GROUP BY R.mID))

{WRONG}
[SELECT ABS(aa-ab) AS Diff
FROM (SELECT AVG(Avr) AS ab
      FROM (SELECT AVG(stars) AS Avr FROM Rating R, Movie M
            WHERE M.mID=R.mID AND year<1980
            GROUP BY R.mID)
UNION
SELECT AVG(Avr) AS aa
FROM (SELECT AVG(stars) AS Avr FROM Rating R, Movie M
      WHERE M.mID=R.mID AND year>=1980
      GROUP BY R.mID))]
***Query failed to execute: no such column: aa

SQL Movie-Rating Query Exercises Extras
